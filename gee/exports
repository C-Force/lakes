/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var naip = ee.ImageCollection("USDA/NAIP/DOQQ"),
    lithology = ee.Image("CSP/ERGo/1_0/US/lithology"),
    physiography = ee.Image("CSP/ERGo/1_0/US/physiography"),
    ned_landform = ee.Image("CSP/ERGo/1_0/US/landforms"),
    ned_mtpi = ee.Image("CSP/ERGo/1_0/US/mTPI"),
    ned_chili = ee.Image("CSP/ERGo/1_0/US/CHILI"),
    ned = ee.Image("USGS/NED"),
    wi_res = ee.FeatureCollection("users/luoqixin/WI_Res_363_100m"),
    mi_res = ee.FeatureCollection("users/luoqixin/Final_res_100m_buffer_MI"),
    mi_nl = ee.FeatureCollection("users/luoqixin/MI_NL_100m"),
    wi_nl = ee.FeatureCollection("users/luoqixin/WI_NL_100m");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var nedClassNum = [11, 12, 13, 14, 15, 21, 22, 23, 24, 31, 32, 33, 34, 41, 42];
var nedClassNames = [
  'Peak/ridge (warm)',
  'Peak/ridge',
  'Peak/ridge (cool)',
  'Mountain/divide',
  'Cliff',
  'Upper slope (warm)',
  'Upper slope',
  'Upper slope (cool)',
  'Upper slope (flat)',
  'Lower slope (warm)',
  'Lower slope',
  'Lower slope (cool)',
  'Lower slope (flat)',
  'Valley',
  'Valley (narrow)',
];
var lithologyClassNum = [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20];
var lithologyClassNames = [
  'Water',
  'Carbonate',
  'Non-carbonate',
  'Alkaline intrusive',
  'Silicic residual',
  'Extrusive volcanic',
  'Colluvial sediment',
  'Glacial till clay',
  'Glacial till loam',
  'Glacial till coarse',
  'Glacial lake sediment fine',
  'Glacial outwash coarse',
  'Hydric',
  'Eolian sediment coarse',
  'Eolian sediment fine',
  'Saline lake sediment',
  'Alluvium and coastal sediment fine',
  'Coastal sediment coarse',
];

var phyClassNum = [];
var phyClassNames = [];

function padStart(str, targetLength, padString) {
  targetLength = targetLength >> 0; //truncate if number or convert non-number to 0;
  padString = String((typeof padString !== 'undefined' ? padString : ' '));
  if (str.length > targetLength) {
    return String(str);
  }
  else {
    targetLength = targetLength - str.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
    }
    return padString.slice(0,targetLength) + String(str);
  }
}

var intersect = function(e1, middle) {
  return function(e2) {
    return e1.toString() + middle + padStart(e2.toString(), 2, '0');
  }
}
for (var i = 0; i < nedClassNum.length; ++i) {
  phyClassNum = phyClassNum.concat(lithologyClassNum.map(intersect(nedClassNum[i], '')))
}
for (var i = 0; i < nedClassNum.length; ++i) {
  phyClassNames = phyClassNames.concat(lithologyClassNames.map(intersect(nedClassNames[i], ' on ')))
}

phyClassNum = phyClassNum.map(function(n) { return parseInt(n); })

print(phyClassNum)
print(phyClassNames)

var setMeanProperty = function(image, name, propertyName) {
  return function(feature) {
    var mean = image.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: feature.geometry(),
      maxPixels: 1e11,
    });
    return feature.set(ee.Dictionary({}).set(propertyName, ee.Dictionary(mean).get(name)));
  }
}

var setModeProperty = function(image, name, propertyName) {
  return function(feature) {
    var mean = image.reduceRegion({
      reducer: ee.Reducer.mode(),
      geometry: feature.geometry(),
      maxPixels: 1e11,
    });
    return feature.set(ee.Dictionary({}).set(propertyName, ee.Dictionary(mean).get(name)));
  }
}

var setPercentProperty = function(image, classList, classNameList, name) {
  classList = ee.List(classList);
  classNameList = ee.List(classNameList);
  return function(feature) {
    var cList = image.reduceRegion({
      reducer: ee.Reducer.toList(),
      geometry: feature.geometry(),
    });
    cList = ee.List(ee.Dictionary(cList).get(name));
    var pList = classList.map(function(c) {
      return cList.frequency(c);
    });
    var result = pList.map(function(c) {
      return ee.Number(c).divide(cList.size());
    });
    return feature.set(ee.Dictionary.fromLists(classNameList, result));
  }
}

// Initialize labels
var nl = mi_nl.merge(wi_nl);
var res = mi_res.merge(wi_res);

nl = nl.map(function(feature) {
  return feature.set({ res: 0 });
});

res = res.map(function(feature) {
  return feature.set({ res: 1 });
});

var trainning = nl.merge(res);
print(trainning.size());

// Set properties
trainning = trainning.map(setPercentProperty(ned_landform, nedClassNum, nedClassNames, 'constant'));
trainning = trainning.map(setPercentProperty(lithology, lithologyClassNum, lithologyClassNames, 'b1'));
trainning = trainning.map(setMeanProperty(ned_mtpi, 'elevation', 'mtpi'));
trainning = trainning.map(setMeanProperty(ned_chili, 'constant', 'chili'));
trainning = trainning.map(setPercentProperty(physiography, phyClassNum, phyClassNames, 'constant'));
trainning = trainning.map(setMeanProperty(ned, 'elevation', 'ned'));

// print(trainning)

Export.table.toDrive({
  collection: trainning,
  description: 'lakes_training_v3',
  fileFormat: 'CSV'
});